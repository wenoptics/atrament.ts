!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.atramentJs=e():t.atramentJs=e()}(window,(function(){return function(t){var e={};function s(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,s),o.l=!0,o.exports}return s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)s.d(i,o,function(e){return t[e]}.bind(null,o));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){t.exports=s(1)},function(t,e,s){"use strict";s.r(e);class i{constructor(t,e){this.x=t,this.y=e}set(t,e){this.x=t,this.y=e}}class o extends i{constructor(){super(0,0),this.down=!1,this.previous=new i(0,0)}}const n=100,r=1,h=50-r,a=.5,c=.87,d=.85,u=10,l=2;function f(t,e,s,i){const o=Math.pow(s-t,2),n=Math.pow(i-e,2);return Math.sqrt(o+n)}function m(t,e,s,i,o){return n=>{const r=t[n],h=t[n+1],a=t[n+2],c=t[n+3];return r===e&&h===s&&a===i&&c===o}}class v{constructor(){this.eventListeners=new Map}addEventListener(t,e){const s=this.eventListeners.get(t)||new Set;s.add(e),this.eventListeners.set(t,s)}removeEventListener(t,e){const s=this.eventListeners.get(t);s&&s.delete(e)}dispatchEvent(t,e){const s=this.eventListeners.get(t);s&&s.forEach(t=>t(e))}}function p(t,e){for(let s=0;s<t.length;s++)if(t[s]===e)return!0;return!1}function g(t,e){const s="changedTouches"in t&&t.changedTouches[0]||t;return{x:"offsetX"in s?s.offsetX:s.clientX-e.left,y:"offsetY"in s?s.offsetY:s.clientY-e.top}}var w;!function(t){t.DRAW="draw",t.ERASE="erase",t.FILL="fill",t.DISABLED="disabled"}(w||(w={}));const y=[w.DRAW,w.ERASE];class x extends v{constructor(t,e={}){if("undefined"==typeof window)throw new Error("Looks like we're not running in a browser");if(super(),t instanceof window.Node&&"CANVAS"===t.tagName)this.canvas=t;else{if("string"!=typeof t)throw new Error(`can't look for canvas based on '${t}'`);this.canvas=document.querySelector(t)}if(!this.canvas)throw new Error("canvas not found");this.canvas.width=e.width||this.canvas.width,this.canvas.height=e.height||this.canvas.height,this.mouse=new o;const s=t=>{t.cancelable&&t.preventDefault();const e=this.canvas.getBoundingClientRect(),{x:s,y:i}=g(t,e),{mouse:o}=this;if(o.down&&p(y,this.mode)){const{x:t,y:e}=this.draw(s,i,o.previous.x,o.previous.y);this._dirty||this.mode!==w.DRAW||s===o.x&&i===o.y||(this._dirty=!0,this.fireDirty()),o.set(s,i),o.previous.set(t,e)}else o.set(s,i)},i=t=>{if(t.cancelable&&t.preventDefault(),s(t),this.mode===w.FILL)return void this.fill();const{mouse:e}=this;e.previous.set(e.x,e.y),e.down=!0,this.beginStroke(e.previous.x,e.previous.y)},n=t=>{if(this.mode===w.FILL)return;const{mouse:e}=this;if(!e.down)return;const s=this.canvas.getBoundingClientRect(),{x:i,y:o}=g(t,s);if(e.down=!1,e.x===i&&e.y===o&&p(y,this.mode)){const{x:t,y:s}=this.draw(e.x,e.y,e.previous.x,e.previous.y);e.previous.set(t,s)}this.endStroke(e.x,e.y)};this.canvas.addEventListener("mousemove",s),this.canvas.addEventListener("mousedown",i),document.addEventListener("mouseup",n),this.canvas.addEventListener("touchstart",i),this.canvas.addEventListener("touchend",n),this.canvas.addEventListener("touchmove",s),this.destroy=()=>{this.clear(),this.canvas.removeEventListener("mousemove",s),this.canvas.removeEventListener("mousedown",i),document.removeEventListener("mouseup",n),this.canvas.removeEventListener("touchstart",i),this.canvas.removeEventListener("touchend",n),this.canvas.removeEventListener("touchmove",s)},this.context=this.canvas.getContext("2d"),this.context.globalCompositeOperation="source-over",this.context.globalAlpha=1,this.context.strokeStyle=e.color||"rgba(0,0,0,1)",this.context.lineCap="round",this.context.lineJoin="round",this.context.translate(.5,.5),this._filling=!1,this._fillStack=[],this.recordStrokes=!1,this.strokeMemory=[],this.smoothing=d,this._thickness=l,this._targetThickness=this._thickness,this._weight=this._thickness,this._maxWeight=this._thickness+u,this._mode=w.DRAW,this.adaptiveStroke=!0,void 0!==e.weight&&(this.weight=e.weight),void 0!==e.smoothing&&(this.smoothing=e.smoothing),void 0!==e.adaptiveStroke&&(this.adaptiveStroke=e.adaptiveStroke),void 0!==e.mode&&(this.mode=e.mode)}beginStroke(t,e){this.context.beginPath(),this.context.moveTo(t,e),this.recordStrokes&&(this.strokeTimestamp=performance.now(),this.strokeMemory.push({point:new i(t,e),time:performance.now()-this.strokeTimestamp})),this.dispatchEvent("strokestart",{x:t,y:e})}endStroke(t,e){if(this.context.closePath(),this.recordStrokes&&this.strokeMemory.push({point:new i(t,e),time:performance.now()-this.strokeTimestamp}),this.dispatchEvent("strokeend",{x:t,y:e}),this.recordStrokes){const t={points:this.strokeMemory.slice(),mode:this.mode,weight:this.weight,smoothing:this.smoothing,color:this.color,adaptiveStroke:this.adaptiveStroke};this.dispatchEvent("strokerecorded",{stroke:t})}this.strokeMemory=[],delete this.strokeTimestamp}draw(t,e,s,o){this.recordStrokes&&this.strokeMemory.push({point:new i(t,e),time:performance.now()-this.strokeTimestamp});const{context:n}=this,d=f(t,e,s,o),u=Math.min(c,this.smoothing+(d-60)/3e3),l=t-(t-s)*u,m=e-(e-o)*u,v=f(l,m,s,o);return this.adaptiveStroke?(this._targetThickness=(v-r)/h*(this._maxWeight-this._weight)+this._weight,this._thickness>this._targetThickness?this._thickness-=a:this._thickness<this._targetThickness&&(this._thickness+=a),n.lineWidth=this._thickness):n.lineWidth=this._weight,n.quadraticCurveTo(s,o,l,m),n.stroke(),{x:l,y:m}}get color(){return this.context.strokeStyle.toString()}set color(t){if("string"!=typeof t)throw new Error("wrong argument type");this.context.strokeStyle=t}get weight(){return this._weight}set weight(t){if("number"!=typeof t)throw new Error("wrong argument type");this._weight=t,this._thickness=t,this._targetThickness=t,this._maxWeight=t+u}get mode(){return this._mode}set mode(t){if("string"!=typeof t)throw new Error("wrong argument type");switch(t){case w.ERASE:this._mode=w.ERASE,this.context.globalCompositeOperation="destination-out";break;case w.FILL:this._mode=w.FILL,this.context.globalCompositeOperation="source-over";break;case w.DISABLED:this._mode=w.DISABLED;break;default:this._mode=w.DRAW,this.context.globalCompositeOperation="source-over"}}isDirty(){return!!this._dirty}fireDirty(){this.dispatchEvent("dirty")}clear(){this.isDirty&&(this._dirty=!1,this.dispatchEvent("clean"),this.mode===w.ERASE?(this.mode=w.DRAW,this.context.clearRect(-10,-10,this.canvas.width+20,this.canvas.height+20),this.mode=w.ERASE):this.context.clearRect(-10,-10,this.canvas.width+20,this.canvas.height+20))}toImage(){return this.canvas.toDataURL()}fill(){const{mouse:t}=this,{context:e}=this,s=Array.from(e.getImageData(t.x,t.y,1,1).data);if(4!==s.length)throw new Error("Expect pixel format of RGBA");if(this._filling)this._fillStack.push([t.x,t.y,s]);else{const{x:e,y:i}=t;this.dispatchEvent("fillstart",{x:e,y:i}),this._filling=!0,setTimeout(()=>{this._floodFill(t.x,t.y,s)},n)}}_floodFill(t,e,s){const{context:i}=this,o=Math.floor(t),n=Math.floor(e),r=i.canvas.width,h=i.canvas.height,a=[[o,n]],c=function(t){const e=t.match(/^#?([\da-f]{2})([\da-f]{2})([\da-f]{2})$/i);return[parseInt(e[1],16),parseInt(e[2],16),parseInt(e[3],16)]}(this.color),d=i.getImageData(0,0,i.canvas.width,i.canvas.height),u=Array.from(d.data),l=Math.min(10*i.globalAlpha*255,255),f=function(t,e,s,i,o,n){const r=m(t,...o);return o=>{t[o]=e,t[o+1]=s,t[o+2]=i,t[o+3]=n,r(o+4)||(t[o+4]=.01*t[o+4]+.99*e,t[o+4+1]=.01*t[o+4+1]+.99*s,t[o+4+2]=.01*t[o+4+2]+.99*i,t[o+4+3]=.01*t[o+4+3]+.99*n),r(o-4)||(t[o-4]=.01*t[o-4]+.99*e,t[o-4+1]=.01*t[o-4+1]+.99*s,t[o-4+2]=.01*t[o-4+2]+.99*i,t[o-4+3]=.01*t[o-4+3]+.99*n)}}(u,...c,s,l),v=m(u,...s);if(m(u,...c,255)(4*(n*i.canvas.width+o)))return this._filling=!1,void this.dispatchEvent("fillend",{});for(;a.length;){const t=a.pop(),e=t[0];let s=t[1],i=4*(s*r+e);for(;s-- >=0&&v(i);)i-=4*r;i+=4*r,++s;let o=!1,n=!1;for(;s++<h-1&&v(i);)f(i),e>0&&(v(i-4)?o||(a.push([e-1,s]),o=!0):o&&(o=!1)),e<r-1&&(v(i+4)?n||(a.push([e+1,s]),n=!0):n&&(n=!1)),i+=4*r}i.putImageData(d,0,0),this._fillStack.length?this._floodFill(...this._fillStack.shift()):(this._filling=!1,this.dispatchEvent("fillend",{}))}}s.d(e,"Atrament",(function(){return x}))}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdHJhbWVudEpzL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9hdHJhbWVudEpzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2F0cmFtZW50SnMvLi9zcmMvbW91c2UudHMiLCJ3ZWJwYWNrOi8vYXRyYW1lbnRKcy8uL3NyYy9jb25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vYXRyYW1lbnRKcy8uL3NyYy9waXhlbHMudHMiLCJ3ZWJwYWNrOi8vYXRyYW1lbnRKcy8uL3NyYy9ldmVudHMudHMiLCJ3ZWJwYWNrOi8vYXRyYW1lbnRKcy8uL3NyYy91dGlscy50cyIsIndlYnBhY2s6Ly9hdHJhbWVudEpzLy4vc3JjL2F0cmFtZW50LnRzIiwid2VicGFjazovL2F0cmFtZW50SnMvLi9pbmRleC50cyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJ3aW5kb3ciLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiUG9pbnQiLCJ4IiwieSIsInRoaXMiLCJNb3VzZSIsInN1cGVyIiwiZG93biIsInByZXZpb3VzIiwiZmxvb2RGaWxsSW50ZXJ2YWwiLCJtaW5MaW5lVGhpY2tuZXNzIiwibGluZVRoaWNrbmVzc1JhbmdlIiwidGhpY2tuZXNzSW5jcmVtZW50IiwibWluU21vb3RoaW5nRmFjdG9yIiwiaW5pdGlhbFNtb290aGluZ0ZhY3RvciIsIndlaWdodFNwcmVhZCIsImluaXRpYWxUaGlja25lc3MiLCJsaW5lRGlzdGFuY2UiLCJ4MSIsInkxIiwieDIiLCJ5MiIsInhzIiwiTWF0aCIsInBvdyIsInlzIiwic3FydCIsImRhdGEiLCJjb21wUiIsImNvbXBHIiwiY29tcEIiLCJjb21wQSIsInBpeGVsUG9zIiwiZyIsImIiLCJhIiwiQXRyYW1lbnRFdmVudFRhcmdldCIsImV2ZW50TGlzdGVuZXJzIiwiTWFwIiwiZXZlbnROYW1lIiwiaGFuZGxlciIsImhhbmRsZXJzIiwiU2V0IiwiYWRkIiwic2V0IiwiZGVsZXRlIiwiZm9yRWFjaCIsImluY2x1ZGVzIiwiYXJyIiwiZWxlbWVudCIsImxlbmd0aCIsInVucGFja09mZnNldFhZIiwiZXZlbnQiLCJyZWN0IiwicG9zaXRpb24iLCJjaGFuZ2VkVG91Y2hlcyIsIm9mZnNldFgiLCJjbGllbnRYIiwibGVmdCIsIm9mZnNldFkiLCJjbGllbnRZIiwidG9wIiwiRHJhd2luZ01vZGUiLCJQYXRoRHJhd2luZ01vZGVzIiwiRFJBVyIsIkVSQVNFIiwic2VsZWN0b3IiLCJjb25maWciLCJFcnJvciIsIk5vZGUiLCJ0YWdOYW1lIiwiY2FudmFzIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2lkdGgiLCJoZWlnaHQiLCJtb3VzZSIsIm1vdXNlTW92ZSIsImNhbmNlbGFibGUiLCJwcmV2ZW50RGVmYXVsdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIm5ld1giLCJuZXdZIiwiZHJhdyIsIl9kaXJ0eSIsImZpcmVEaXJ0eSIsIm1vdXNlRG93biIsIkZJTEwiLCJmaWxsIiwiYmVnaW5TdHJva2UiLCJtb3VzZVVwIiwibngiLCJueSIsImVuZFN0cm9rZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJkZXN0cm95IiwiY2xlYXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY29udGV4dCIsImdldENvbnRleHQiLCJnbG9iYWxDb21wb3NpdGVPcGVyYXRpb24iLCJnbG9iYWxBbHBoYSIsInN0cm9rZVN0eWxlIiwiY29sb3IiLCJsaW5lQ2FwIiwibGluZUpvaW4iLCJ0cmFuc2xhdGUiLCJfZmlsbGluZyIsIl9maWxsU3RhY2siLCJyZWNvcmRTdHJva2VzIiwic3Ryb2tlTWVtb3J5Iiwic21vb3RoaW5nIiwiX3RoaWNrbmVzcyIsIl90YXJnZXRUaGlja25lc3MiLCJfd2VpZ2h0IiwiX21heFdlaWdodCIsIl9tb2RlIiwiYWRhcHRpdmVTdHJva2UiLCJ1bmRlZmluZWQiLCJ3ZWlnaHQiLCJiZWdpblBhdGgiLCJtb3ZlVG8iLCJzdHJva2VUaW1lc3RhbXAiLCJwZXJmb3JtYW5jZSIsIm5vdyIsInB1c2giLCJwb2ludCIsInRpbWUiLCJkaXNwYXRjaEV2ZW50IiwiY2xvc2VQYXRoIiwic3Ryb2tlIiwicG9pbnRzIiwic2xpY2UiLCJwcmV2WCIsInByZXZZIiwicmF3RGlzdCIsInNtb290aGluZ0ZhY3RvciIsIm1pbiIsInByb2NYIiwicHJvY1kiLCJkaXN0IiwibGluZVdpZHRoIiwicXVhZHJhdGljQ3VydmVUbyIsInRvU3RyaW5nIiwidyIsIkRJU0FCTEVEIiwiaXNEaXJ0eSIsImNsZWFyUmVjdCIsInRvRGF0YVVSTCIsInN0YXJ0Q29sb3IiLCJBcnJheSIsImZyb20iLCJnZXRJbWFnZURhdGEiLCJzZXRUaW1lb3V0IiwiX2Zsb29kRmlsbCIsIl9zdGFydFgiLCJfc3RhcnRZIiwic3RhcnRYIiwiZmxvb3IiLCJzdGFydFkiLCJjYW52YXNXaWR0aCIsImNhbnZhc0hlaWdodCIsInBpeGVsU3RhY2siLCJmaWxsQ29sb3IiLCJoZXhDb2xvciIsIm1hdGNoIiwicGFyc2VJbnQiLCJjb2xvckxheWVyIiwiY29sb3JMYXllckRhdGEiLCJhbHBoYSIsImNvbG9yUGl4ZWwiLCJmaWxsUiIsImZpbGxHIiwiZmlsbEIiLCJtYXRjaGVyIiwibWF0Y2hDb2xvciIsIm1hdGNoRmlsbENvbG9yIiwibmV3UG9zIiwicG9wIiwicmVhY2hMZWZ0IiwicmVhY2hS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QnZHLEtBQUs0SCxjQUFjLFVBQVcsSUFJaEMsS0FBT2tDLEVBQVdoSCxRQUFRLENBQ3hCLE1BQU0rSCxFQUFTZixFQUFXZ0IsTUFDcEJoTCxFQUFJK0ssRUFBTyxHQUNqQixJQUFJOUssRUFBSThLLEVBQU8sR0FFWGpKLEVBQW1DLEdBQXZCN0IsRUFBSTZKLEVBQWM5SixHQUVsQyxLQUFPQyxNQUFPLEdBQUs0SyxFQUFXL0ksSUFDNUJBLEdBQTBCLEVBQWRnSSxFQUVkaEksR0FBMEIsRUFBZGdJLElBRVY3SixFQUVGLElBQUlnTCxHQUFZLEVBQ1pDLEdBQWEsRUFFakIsS0FBT2pMLElBQU04SixFQUFlLEdBQUtjLEVBQVcvSSxJQUMxQzBJLEVBQVcxSSxHQUVQOUIsRUFBSSxJQUNGNkssRUFBVy9JLEVBQVcsR0FDbkJtSixJQUNIakIsRUFBV3JDLEtBQUssQ0FBQzNILEVBQUksRUFBR0MsSUFDeEJnTCxHQUFZLEdBR1BBLElBQ1BBLEdBQVksSUFJWmpMLEVBQUk4SixFQUFjLElBQ2hCZSxFQUFXL0ksRUFBVyxHQUNuQm9KLElBQ0hsQixFQUFXckMsS0FBSyxDQUFDM0gsRUFBSSxFQUFHQyxJQUN4QmlMLEdBQWEsR0FHUkEsSUFDUEEsR0FBYSxJQUlqQnBKLEdBQTBCLEVBQWRnSSxFQUtoQjlELEVBQVFtRixhQUFhZCxFQUFZLEVBQUcsR0FFaENuSyxLQUFLd0csV0FBVzFELE9BQ2xCOUMsS0FBS3NKLGNBQWN0SixLQUFLd0csV0FBVzBFLFVBR25DbEwsS0FBS3VHLFVBQVcsRUFDaEJ2RyxLQUFLNEgsY0FBYyxVQUFXLE1DdmVwQyIsImZpbGUiOiJhdHJhbWVudC51bWQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiYXRyYW1lbnRKc1wiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJhdHJhbWVudEpzXCJdID0gZmFjdG9yeSgpO1xufSkod2luZG93LCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCIvLyBtYWtlIGEgY2xhc3MgZm9yIFBvaW50XG5jbGFzcyBQb2ludCB7XG4gIHg6IG51bWJlcjtcblxuICB5OiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cblxuICBzZXQoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cbn1cblxuLy8gbWFrZSBhIGNsYXNzIGZvciB0aGUgbW91c2UgZGF0YVxuY2xhc3MgTW91c2UgZXh0ZW5kcyBQb2ludCB7XG5cbiAgZG93bjogYm9vbGVhbjtcblxuICBwcmV2aW91czogUG9pbnQ7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoMCwgMCk7XG4gICAgdGhpcy5kb3duID0gZmFsc2U7XG4gICAgdGhpcy5wcmV2aW91cyA9IG5ldyBQb2ludCgwLCAwKTtcbiAgfVxufVxuXG5leHBvcnQgeyBNb3VzZSwgUG9pbnQgfTtcbiIsImV4cG9ydCBjb25zdCBmbG9vZEZpbGxJbnRlcnZhbCA9IDEwMDtcbmV4cG9ydCBjb25zdCBtYXhMaW5lVGhpY2tuZXNzID0gNTA7XG5leHBvcnQgY29uc3QgbWluTGluZVRoaWNrbmVzcyA9IDE7XG5leHBvcnQgY29uc3QgbGluZVRoaWNrbmVzc1JhbmdlID0gbWF4TGluZVRoaWNrbmVzcyAtIG1pbkxpbmVUaGlja25lc3M7XG5leHBvcnQgY29uc3QgdGhpY2tuZXNzSW5jcmVtZW50ID0gMC41O1xuZXhwb3J0IGNvbnN0IG1pblNtb290aGluZ0ZhY3RvciA9IDAuODc7XG5leHBvcnQgY29uc3QgaW5pdGlhbFNtb290aGluZ0ZhY3RvciA9IDAuODU7XG5leHBvcnQgY29uc3Qgd2VpZ2h0U3ByZWFkID0gMTA7XG5leHBvcnQgY29uc3QgaW5pdGlhbFRoaWNrbmVzcyA9IDI7XG4iLCJleHBvcnQgdHlwZSBDb2xvclBpeGVsUkdCQSA9IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdXG5leHBvcnQgdHlwZSBDb2xvclBpeGVsUkdCID0gW251bWJlciwgbnVtYmVyLCBudW1iZXJdXG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5lRGlzdGFuY2UgKHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIpIHtcbiAgLy8gY2FsY3VsYXRlIGV1Y2xpZGVhbiBkaXN0YW5jZSBiZXR3ZWVuICh4MSwgeTEpIGFuZCAoeDIsIHkyKVxuICBjb25zdCB4cyA9IE1hdGgucG93KHgyIC0geDEsIDIpO1xuICBjb25zdCB5cyA9IE1hdGgucG93KHkyIC0geTEsIDIpO1xuICByZXR1cm4gTWF0aC5zcXJ0KHhzICsgeXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGV4VG9SZ2IgKGhleENvbG9yOiBzdHJpbmcpOiBDb2xvclBpeGVsUkdCIHtcbiAgLy8gU2luY2UgaW5wdXQgdHlwZSBjb2xvciBwcm92aWRlcyBoZXggYW5kIEltYWdlRGF0YSBhY2NlcHRzIFJHQiBuZWVkIHRvIHRyYW5zZm9ybVxuICBjb25zdCBtID0gaGV4Q29sb3IubWF0Y2goL14jPyhbXFxkYS1mXXsyfSkoW1xcZGEtZl17Mn0pKFtcXGRhLWZdezJ9KSQvaSk7XG4gIHJldHVybiBbXG4gICAgcGFyc2VJbnQobVsxXSwgMTYpLFxuICAgIHBhcnNlSW50KG1bMl0sIDE2KSxcbiAgICBwYXJzZUludChtWzNdLCAxNilcbiAgXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoQ29sb3IgKGRhdGE6IG51bWJlcltdLCBjb21wUjogbnVtYmVyLCBjb21wRzogbnVtYmVyLCBjb21wQjogbnVtYmVyLCBjb21wQTogbnVtYmVyKSB7XG4gIHJldHVybiAocGl4ZWxQb3M6IG51bWJlcikgPT4ge1xuICAgIC8vIFBpeGVsIGNvbG9yIGVxdWFscyBjb21wIGNvbG9yP1xuICAgIGNvbnN0IHIgPSBkYXRhW3BpeGVsUG9zXTtcbiAgICBjb25zdCBnID0gZGF0YVtwaXhlbFBvcyArIDFdO1xuICAgIGNvbnN0IGIgPSBkYXRhW3BpeGVsUG9zICsgMl07XG4gICAgY29uc3QgYSA9IGRhdGFbcGl4ZWxQb3MgKyAzXTtcblxuICAgIHJldHVybiAociA9PT0gY29tcFIgJiYgZyA9PT0gY29tcEcgJiYgYiA9PT0gY29tcEIgJiYgYSA9PT0gY29tcEEpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29sb3JQaXhlbCAoZGF0YTogbnVtYmVyW10sIGZpbGxSOiBudW1iZXIsIGZpbGxHOiBudW1iZXIsIGZpbGxCOiBudW1iZXIsIHN0YXJ0Q29sb3I6IENvbG9yUGl4ZWxSR0JBLCBhbHBoYTogbnVtYmVyKSB7XG4gIGNvbnN0IG1hdGNoZXIgPSBtYXRjaENvbG9yKGRhdGEsIC4uLnN0YXJ0Q29sb3IpO1xuXG4gIHJldHVybiAocGl4ZWxQb3M6IG51bWJlcikgPT4ge1xuICAgIC8vIFVwZGF0ZSBmaWxsIGNvbG9yIGluIG1hdHJpeFxuICAgIGRhdGFbcGl4ZWxQb3NdID0gZmlsbFI7XG4gICAgZGF0YVtwaXhlbFBvcyArIDFdID0gZmlsbEc7XG4gICAgZGF0YVtwaXhlbFBvcyArIDJdID0gZmlsbEI7XG4gICAgZGF0YVtwaXhlbFBvcyArIDNdID0gYWxwaGE7XG5cbiAgICBpZiAoIW1hdGNoZXIocGl4ZWxQb3MgKyA0KSkge1xuICAgICAgZGF0YVtwaXhlbFBvcyArIDRdID0gZGF0YVtwaXhlbFBvcyArIDRdICogMC4wMSArIGZpbGxSICogMC45OTtcbiAgICAgIGRhdGFbcGl4ZWxQb3MgKyA0ICsgMV0gPSBkYXRhW3BpeGVsUG9zICsgNCArIDFdICogMC4wMSArIGZpbGxHICogMC45OTtcbiAgICAgIGRhdGFbcGl4ZWxQb3MgKyA0ICsgMl0gPSBkYXRhW3BpeGVsUG9zICsgNCArIDJdICogMC4wMSArIGZpbGxCICogMC45OTtcbiAgICAgIGRhdGFbcGl4ZWxQb3MgKyA0ICsgM10gPSBkYXRhW3BpeGVsUG9zICsgNCArIDNdICogMC4wMSArIGFscGhhICogMC45OTtcbiAgICB9XG5cbiAgICBpZiAoIW1hdGNoZXIocGl4ZWxQb3MgLSA0KSkge1xuICAgICAgZGF0YVtwaXhlbFBvcyAtIDRdID0gZGF0YVtwaXhlbFBvcyAtIDRdICogMC4wMSArIGZpbGxSICogMC45OTtcbiAgICAgIGRhdGFbcGl4ZWxQb3MgLSA0ICsgMV0gPSBkYXRhW3BpeGVsUG9zIC0gNCArIDFdICogMC4wMSArIGZpbGxHICogMC45OTtcbiAgICAgIGRhdGFbcGl4ZWxQb3MgLSA0ICsgMl0gPSBkYXRhW3BpeGVsUG9zIC0gNCArIDJdICogMC4wMSArIGZpbGxCICogMC45OTtcbiAgICAgIGRhdGFbcGl4ZWxQb3MgLSA0ICsgM10gPSBkYXRhW3BpeGVsUG9zIC0gNCArIDNdICogMC4wMSArIGFscGhhICogMC45OTtcbiAgICB9XG4gIH07XG59XG4iLCJ0eXBlIEV2ZW50SGFuZGxlcjxUPiA9IChkYXRhPzogVCkgPT4gdm9pZFxuXG5jbGFzcyBBdHJhbWVudEV2ZW50VGFyZ2V0IHtcblxuICBldmVudExpc3RlbmVyczogTWFwPHN0cmluZywgU2V0PEV2ZW50SGFuZGxlcjx1bmtub3duPj4+O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMgPSBuZXcgTWFwKCk7XG4gIH1cblxuICBhZGRFdmVudExpc3RlbmVyPFQ+KGV2ZW50TmFtZTogc3RyaW5nLCBoYW5kbGVyOiBFdmVudEhhbmRsZXI8VD4pIHtcbiAgICBjb25zdCBoYW5kbGVycyA9IHRoaXMuZXZlbnRMaXN0ZW5lcnMuZ2V0KGV2ZW50TmFtZSkgfHwgbmV3IFNldCgpO1xuICAgIGhhbmRsZXJzLmFkZChoYW5kbGVyKTtcbiAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLnNldChldmVudE5hbWUsIGhhbmRsZXJzKTtcbiAgfVxuXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXI8VD4oZXZlbnROYW1lOiBzdHJpbmcsIGhhbmRsZXI6IEV2ZW50SGFuZGxlcjxUPikge1xuICAgIGNvbnN0IGhhbmRsZXJzID0gdGhpcy5ldmVudExpc3RlbmVycy5nZXQoZXZlbnROYW1lKTtcbiAgICBpZiAoIWhhbmRsZXJzKSByZXR1cm47XG4gICAgaGFuZGxlcnMuZGVsZXRlKGhhbmRsZXIpO1xuICB9XG5cbiAgZGlzcGF0Y2hFdmVudDxUPiAoZXZlbnROYW1lOiBzdHJpbmcsIGRhdGE/OiBUKSB7XG4gICAgY29uc3QgaGFuZGxlcnMgPSB0aGlzLmV2ZW50TGlzdGVuZXJzLmdldChldmVudE5hbWUpO1xuICAgIGlmICghaGFuZGxlcnMpIHJldHVybjtcbiAgICBoYW5kbGVycy5mb3JFYWNoKGhhbmRsZXIgPT4gaGFuZGxlcihkYXRhKSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgQXRyYW1lbnRFdmVudFRhcmdldCB9O1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGluY2x1ZGVzPFQ+KGFycjogQXJyYXk8VD4sIGVsZW1lbnQ6IFQpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldID09PSBlbGVtZW50KSByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnBhY2tPZmZzZXRYWShldmVudDogTW91c2VFdmVudCB8IFRvdWNoRXZlbnQsIHJlY3Q6IERPTVJlY3QpIHtcbiAgY29uc3QgcG9zaXRpb24gPSAoJ2NoYW5nZWRUb3VjaGVzJyBpbiBldmVudCkgJiYgZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0gfHwgZXZlbnQgYXMgTW91c2VFdmVudDtcbiAgY29uc3QgeCA9ICdvZmZzZXRYJyBpbiBwb3NpdGlvbiA/IHBvc2l0aW9uLm9mZnNldFggOiBwb3NpdGlvbi5jbGllbnRYIC0gcmVjdC5sZWZ0O1xuICBjb25zdCB5ID0gJ29mZnNldFknIGluIHBvc2l0aW9uID8gcG9zaXRpb24ub2Zmc2V0WTogcG9zaXRpb24uY2xpZW50WSAtIHJlY3QudG9wO1xuICByZXR1cm4geyB4LCB5IH07XG59XG4iLCJpbXBvcnQgeyBNb3VzZSwgUG9pbnQgfSBmcm9tICcuL21vdXNlJztcbmltcG9ydCAqIGFzIENvbnN0YW50cyBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgKiBhcyBQaXhlbHMgZnJvbSAnLi9waXhlbHMnO1xuaW1wb3J0IHsgQXRyYW1lbnRFdmVudFRhcmdldCB9IGZyb20gJy4vZXZlbnRzJztcbmltcG9ydCB7IENvbG9yUGl4ZWxSR0JBIH0gZnJvbSAnLi9waXhlbHMnO1xuaW1wb3J0IHsgaW5jbHVkZXMsIHVucGFja09mZnNldFhZIH0gZnJvbSAnLi91dGlscyc7XG5cblxuZW51bSBEcmF3aW5nTW9kZSB7XG4gIERSQVcgPSAnZHJhdycsXG4gIEVSQVNFID0gJ2VyYXNlJyxcbiAgRklMTCA9ICdmaWxsJyxcbiAgRElTQUJMRUQgPSAnZGlzYWJsZWQnLFxufVxuXG5jb25zdCBQYXRoRHJhd2luZ01vZGVzID0gW0RyYXdpbmdNb2RlLkRSQVcsIERyYXdpbmdNb2RlLkVSQVNFXTtcblxudHlwZSBBdHJhbWVudENvbmZpZyA9IHtcbiAgd2lkdGg/OiBudW1iZXJcbiAgaGVpZ2h0PzogbnVtYmVyXG4gIGNvbG9yPzogc3RyaW5nXG4gIHdlaWdodD86IG51bWJlclxuICBzbW9vdGhpbmc/OiBudW1iZXJcbiAgYWRhcHRpdmVTdHJva2U/OiBib29sZWFuXG4gIG1vZGU/OiBEcmF3aW5nTW9kZVxufVxuXG5cbmNsYXNzIEF0cmFtZW50IGV4dGVuZHMgQXRyYW1lbnRFdmVudFRhcmdldCB7XG5cbiAgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudDtcbiAgbW91c2U6IE1vdXNlO1xuXG4gIHByaXZhdGUgY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xuICBwcml2YXRlIF9maWxsaW5nOiBib29sZWFuO1xuICBwcml2YXRlIF9maWxsU3RhY2s6IFtudW1iZXIsIG51bWJlciwgQ29sb3JQaXhlbFJHQkFdW107XG4gIHJlY29yZFN0cm9rZXM6IGJvb2xlYW47XG4gIHN0cm9rZVRpbWVzdGFtcDogbnVtYmVyO1xuICBzdHJva2VNZW1vcnk6IHsgcG9pbnQ6IFBvaW50LCB0aW1lOiBudW1iZXIgfVtdO1xuXG4gIHByaXZhdGUgX2RpcnR5OiBib29sZWFuO1xuICBwcml2YXRlIHNtb290aGluZzogbnVtYmVyO1xuICBwcml2YXRlIF90aGlja25lc3M6IG51bWJlcjtcbiAgcHJpdmF0ZSBfdGFyZ2V0VGhpY2tuZXNzOiBudW1iZXI7XG4gIHByaXZhdGUgX3dlaWdodDogbnVtYmVyO1xuICBwcml2YXRlIF9tYXhXZWlnaHQ6IG51bWJlcjtcblxuICBwdWJsaWMgZGVzdHJveTogKCkgPT4gdm9pZDtcbiAgX21vZGU6IERyYXdpbmdNb2RlO1xuICBhZGFwdGl2ZVN0cm9rZTogYm9vbGVhbjtcblxuXG4gIGNvbnN0cnVjdG9yKHNlbGVjdG9yOiBzdHJpbmcgfCBIVE1MQ2FudmFzRWxlbWVudCwgY29uZmlnOiBBdHJhbWVudENvbmZpZyA9IHt9KSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xvb2tzIGxpa2Ugd2VcXCdyZSBub3QgcnVubmluZyBpbiBhIGJyb3dzZXInKTtcbiAgICB9XG5cbiAgICBzdXBlcigpO1xuXG4gICAgLy8gZ2V0IGNhbnZhcyBlbGVtZW50XG4gICAgaWYgKHNlbGVjdG9yIGluc3RhbmNlb2Ygd2luZG93Lk5vZGUgJiYgc2VsZWN0b3IudGFnTmFtZSA9PT0gJ0NBTlZBUycpIHRoaXMuY2FudmFzID0gc2VsZWN0b3I7XG4gICAgZWxzZSBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJykgdGhpcy5jYW52YXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICBlbHNlIHRocm93IG5ldyBFcnJvcihgY2FuJ3QgbG9vayBmb3IgY2FudmFzIGJhc2VkIG9uICcke3NlbGVjdG9yfSdgKTtcbiAgICBpZiAoIXRoaXMuY2FudmFzKSB0aHJvdyBuZXcgRXJyb3IoJ2NhbnZhcyBub3QgZm91bmQnKTtcblxuICAgIC8vIHNldCBleHRlcm5hbCBjYW52YXMgcGFyYW1zXG4gICAgdGhpcy5jYW52YXMud2lkdGggPSBjb25maWcud2lkdGggfHwgdGhpcy5jYW52YXMud2lkdGg7XG4gICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gY29uZmlnLmhlaWdodCB8fCB0aGlzLmNhbnZhcy5oZWlnaHQ7XG5cbiAgICAvLyBjcmVhdGUgYSBtb3VzZSBvYmplY3RcbiAgICB0aGlzLm1vdXNlID0gbmV3IE1vdXNlKCk7XG5cbiAgICAvLyBtb3VzZW1vdmUgaGFuZGxlclxuICAgIGNvbnN0IG1vdXNlTW92ZSA9IChldmVudDogTW91c2VFdmVudCB8IFRvdWNoRXZlbnQpID0+IHtcbiAgICAgIGlmIChldmVudC5jYW5jZWxhYmxlKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlY3QgPSB0aGlzLmNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGNvbnN0IHsgeCwgeSB9ID0gdW5wYWNrT2Zmc2V0WFkoZXZlbnQsIHJlY3QpO1xuXG4gICAgICBjb25zdCB7IG1vdXNlIH0gPSB0aGlzO1xuICAgICAgLy8gZHJhdyBpZiB3ZSBzaG91bGQgZHJhd1xuICAgICAgaWYgKG1vdXNlLmRvd24gJiYgaW5jbHVkZXMoUGF0aERyYXdpbmdNb2RlcywgdGhpcy5tb2RlKSkge1xuICAgICAgICBjb25zdCB7IHg6IG5ld1gsIHk6IG5ld1kgfSA9IHRoaXMuZHJhdyh4LCB5LCBtb3VzZS5wcmV2aW91cy54LCBtb3VzZS5wcmV2aW91cy55KTtcblxuICAgICAgICBpZiAoIXRoaXMuX2RpcnR5ICYmIHRoaXMubW9kZSA9PT0gRHJhd2luZ01vZGUuRFJBVyAmJiAoeCAhPT0gbW91c2UueCB8fCB5ICE9PSBtb3VzZS55KSkge1xuICAgICAgICAgIHRoaXMuX2RpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLmZpcmVEaXJ0eSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgbW91c2Uuc2V0KHgsIHkpO1xuICAgICAgICBtb3VzZS5wcmV2aW91cy5zZXQobmV3WCwgbmV3WSk7XG4gICAgICB9XG4gZWxzZSB7XG4gICAgICAgIG1vdXNlLnNldCh4LCB5KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gbW91c2Vkb3duIGhhbmRsZXJcbiAgICBjb25zdCBtb3VzZURvd24gPSAoZXZlbnQ6IE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQuY2FuY2VsYWJsZSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgICAgLy8gdXBkYXRlIHBvc2l0aW9uIGp1c3QgaW4gY2FzZVxuICAgICAgbW91c2VNb3ZlKGV2ZW50KTtcblxuICAgICAgLy8gaWYgd2UgYXJlIGZpbGxpbmcgLSBmaWxsIGFuZCByZXR1cm5cbiAgICAgIGlmICh0aGlzLm1vZGUgPT09IERyYXdpbmdNb2RlLkZJTEwpIHtcbiAgICAgICAgdGhpcy5maWxsKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIHJlbWVtYmVyIGl0XG4gICAgICBjb25zdCB7IG1vdXNlIH0gPSB0aGlzO1xuICAgICAgbW91c2UucHJldmlvdXMuc2V0KG1vdXNlLngsIG1vdXNlLnkpO1xuICAgICAgbW91c2UuZG93biA9IHRydWU7XG5cbiAgICAgIHRoaXMuYmVnaW5TdHJva2UobW91c2UucHJldmlvdXMueCwgbW91c2UucHJldmlvdXMueSk7XG4gICAgfTtcblxuICAgIGNvbnN0IG1vdXNlVXAgPSAoZXZlbnQ6IE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50KSA9PiB7XG4gICAgICBpZiAodGhpcy5tb2RlID09PSBEcmF3aW5nTW9kZS5GSUxMKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyBtb3VzZSB9ID0gdGhpcztcblxuICAgICAgaWYgKCFtb3VzZS5kb3duKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcmVjdCA9IHRoaXMuY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgY29uc3QgeyB4LCB5IH0gPSB1bnBhY2tPZmZzZXRYWShldmVudCwgcmVjdCk7XG4gICAgICBtb3VzZS5kb3duID0gZmFsc2U7XG5cbiAgICAgIGlmIChtb3VzZS54ID09PSB4ICYmIG1vdXNlLnkgPT09IHkgJiYgaW5jbHVkZXMoUGF0aERyYXdpbmdNb2RlcywgdGhpcy5tb2RlKSkge1xuICAgICAgICBjb25zdCB7IHg6IG54LCB5OiBueSB9ID0gdGhpcy5kcmF3KG1vdXNlLngsIG1vdXNlLnksIG1vdXNlLnByZXZpb3VzLngsIG1vdXNlLnByZXZpb3VzLnkpO1xuICAgICAgICBtb3VzZS5wcmV2aW91cy5zZXQobngsIG55KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5lbmRTdHJva2UobW91c2UueCwgbW91c2UueSk7XG4gICAgfTtcblxuICAgIC8vIGF0dGFjaCBsaXN0ZW5lcnNcbiAgICB0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBtb3VzZU1vdmUpO1xuICAgIHRoaXMuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG1vdXNlRG93bik7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG1vdXNlVXApO1xuICAgIHRoaXMuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBtb3VzZURvd24pO1xuICAgIHRoaXMuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgbW91c2VVcCk7XG4gICAgdGhpcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgbW91c2VNb3ZlKTtcblxuICAgIC8vIGhlbHBlciBmb3IgZGVzdHJveWluZyBBdHJhbWVudCAocmVtb3ZpbmcgZXZlbnQgbGlzdGVuZXJzKVxuICAgIHRoaXMuZGVzdHJveSA9ICgpID0+IHtcbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHRoaXMuY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG1vdXNlTW92ZSk7XG4gICAgICB0aGlzLmNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBtb3VzZURvd24pO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG1vdXNlVXApO1xuICAgICAgdGhpcy5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG1vdXNlRG93bik7XG4gICAgICB0aGlzLmNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG1vdXNlVXApO1xuICAgICAgdGhpcy5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgbW91c2VNb3ZlKTtcbiAgICB9O1xuXG4gICAgLy8gc2V0IGludGVybmFsIGNhbnZhcyBwYXJhbXNcbiAgICB0aGlzLmNvbnRleHQgPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIHRoaXMuY29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnc291cmNlLW92ZXInO1xuICAgIHRoaXMuY29udGV4dC5nbG9iYWxBbHBoYSA9IDE7XG4gICAgdGhpcy5jb250ZXh0LnN0cm9rZVN0eWxlID0gY29uZmlnLmNvbG9yIHx8ICdyZ2JhKDAsMCwwLDEpJztcbiAgICB0aGlzLmNvbnRleHQubGluZUNhcCA9ICdyb3VuZCc7XG4gICAgdGhpcy5jb250ZXh0LmxpbmVKb2luID0gJ3JvdW5kJztcbiAgICB0aGlzLmNvbnRleHQudHJhbnNsYXRlKDAuNSwgMC41KTtcblxuICAgIHRoaXMuX2ZpbGxpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9maWxsU3RhY2sgPSBbXTtcblxuICAgIC8vIHNldCBkcmF3aW5nIHBhcmFtc1xuICAgIHRoaXMucmVjb3JkU3Ryb2tlcyA9IGZhbHNlO1xuICAgIHRoaXMuc3Ryb2tlTWVtb3J5ID0gW107XG5cbiAgICB0aGlzLnNtb290aGluZyA9IENvbnN0YW50cy5pbml0aWFsU21vb3RoaW5nRmFjdG9yO1xuICAgIHRoaXMuX3RoaWNrbmVzcyA9IENvbnN0YW50cy5pbml0aWFsVGhpY2tuZXNzO1xuICAgIHRoaXMuX3RhcmdldFRoaWNrbmVzcyA9IHRoaXMuX3RoaWNrbmVzcztcbiAgICB0aGlzLl93ZWlnaHQgPSB0aGlzLl90aGlja25lc3M7XG4gICAgdGhpcy5fbWF4V2VpZ2h0ID0gdGhpcy5fdGhpY2tuZXNzICsgQ29uc3RhbnRzLndlaWdodFNwcmVhZDtcblxuICAgIHRoaXMuX21vZGUgPSBEcmF3aW5nTW9kZS5EUkFXO1xuICAgIHRoaXMuYWRhcHRpdmVTdHJva2UgPSB0cnVlO1xuXG4gICAgaWYgKGNvbmZpZy53ZWlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy53ZWlnaHQgPSBjb25maWcud2VpZ2h0O1xuICAgIH1cbiAgICBpZiAoY29uZmlnLnNtb290aGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnNtb290aGluZyA9IGNvbmZpZy5zbW9vdGhpbmc7XG4gICAgfVxuICAgIGlmIChjb25maWcuYWRhcHRpdmVTdHJva2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5hZGFwdGl2ZVN0cm9rZSA9IGNvbmZpZy5hZGFwdGl2ZVN0cm9rZTtcbiAgICB9XG4gICAgaWYgKGNvbmZpZy5tb2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMubW9kZSA9IGNvbmZpZy5tb2RlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBCZWdpbnMgYSBzdHJva2UgYXQgYSBnaXZlbiBwb3NpdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKi9cbiAgYmVnaW5TdHJva2UoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICB0aGlzLmNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgdGhpcy5jb250ZXh0Lm1vdmVUbyh4LCB5KTtcblxuICAgIGlmICh0aGlzLnJlY29yZFN0cm9rZXMpIHtcbiAgICAgIHRoaXMuc3Ryb2tlVGltZXN0YW1wID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICB0aGlzLnN0cm9rZU1lbW9yeS5wdXNoKHsgcG9pbnQ6IG5ldyBQb2ludCh4LCB5KSwgdGltZTogcGVyZm9ybWFuY2Uubm93KCkgLSB0aGlzLnN0cm9rZVRpbWVzdGFtcCB9KTtcbiAgICB9XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KCdzdHJva2VzdGFydCcsIHsgeCwgeSB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbmRzIGEgc3Ryb2tlIGF0IGEgZ2l2ZW4gcG9zaXRpb25cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICovXG4gIGVuZFN0cm9rZSh4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgIHRoaXMuY29udGV4dC5jbG9zZVBhdGgoKTtcblxuICAgIGlmICh0aGlzLnJlY29yZFN0cm9rZXMpIHtcbiAgICAgIHRoaXMuc3Ryb2tlTWVtb3J5LnB1c2goeyBwb2ludDogbmV3IFBvaW50KHgsIHkpLCB0aW1lOiBwZXJmb3JtYW5jZS5ub3coKSAtIHRoaXMuc3Ryb2tlVGltZXN0YW1wIH0pO1xuICAgIH1cbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoJ3N0cm9rZWVuZCcsIHsgeCwgeSB9KTtcblxuICAgIGlmICh0aGlzLnJlY29yZFN0cm9rZXMpIHtcbiAgICAgIGNvbnN0IHN0cm9rZSA9IHtcbiAgICAgICAgcG9pbnRzOiB0aGlzLnN0cm9rZU1lbW9yeS5zbGljZSgpLFxuICAgICAgICBtb2RlOiB0aGlzLm1vZGUsXG4gICAgICAgIHdlaWdodDogdGhpcy53ZWlnaHQsXG4gICAgICAgIHNtb290aGluZzogdGhpcy5zbW9vdGhpbmcsXG4gICAgICAgIGNvbG9yOiB0aGlzLmNvbG9yLFxuICAgICAgICBhZGFwdGl2ZVN0cm9rZTogdGhpcy5hZGFwdGl2ZVN0cm9rZVxuICAgICAgfTtcblxuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KCdzdHJva2VyZWNvcmRlZCcsIHsgc3Ryb2tlIH0pO1xuICAgIH1cbiAgICB0aGlzLnN0cm9rZU1lbW9yeSA9IFtdO1xuICAgIGRlbGV0ZSAodGhpcy5zdHJva2VUaW1lc3RhbXApO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdzIGEgc21vb3RoIHF1YWRyYXRpYyBjdXJ2ZSB3aXRoIGFkYXB0aXZlIHN0cm9rZSB0aGlja25lc3NcbiAgICogYmV0d2VlbiB0d28gcG9pbnRzXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IGN1cnJlbnQgWCBjb29yZGluYXRlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IGN1cnJlbnQgWSBjb29yZGluYXRlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwcmV2WCBwcmV2aW91cyBYIGNvb3JkaW5hdGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IHByZXZZIHByZXZpb3VzIFkgY29vcmRpbmF0ZVxuICAgKi9cbiAgZHJhdyh4OiBudW1iZXIsIHk6IG51bWJlciwgcHJldlg6IG51bWJlciwgcHJldlk6IG51bWJlcikge1xuICAgIGlmICh0aGlzLnJlY29yZFN0cm9rZXMpIHtcbiAgICAgIHRoaXMuc3Ryb2tlTWVtb3J5LnB1c2goeyBwb2ludDogbmV3IFBvaW50KHgsIHkpLCB0aW1lOiBwZXJmb3JtYW5jZS5ub3coKSAtIHRoaXMuc3Ryb2tlVGltZXN0YW1wIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHsgY29udGV4dCB9ID0gdGhpcztcbiAgICAvLyBjYWxjdWxhdGUgZGlzdGFuY2UgZnJvbSBwcmV2aW91cyBwb2ludFxuICAgIGNvbnN0IHJhd0Rpc3QgPSBQaXhlbHMubGluZURpc3RhbmNlKHgsIHksIHByZXZYLCBwcmV2WSk7XG5cbiAgICAvLyBub3csIGhlcmUgd2Ugc2NhbGUgdGhlIGluaXRpYWwgc21vb3RoaW5nIGZhY3RvciBieSB0aGUgcmF3IGRpc3RhbmNlXG4gICAgLy8gdGhpcyBtZWFucyB0aGF0IHdoZW4gdGhlIG1vdXNlIG1vdmVzIGZhc3QsIHRoZXJlIGlzIG1vcmUgc21vb3RoaW5nXG4gICAgLy8gYW5kIHdoZW4gd2UncmUgZHJhd2luZyBzbWFsbCBkZXRhaWxlZCBzdHVmZiwgd2UgaGF2ZSBtb3JlIGNvbnRyb2xcbiAgICAvLyBhbHNvIHdlIGhhcmQgY2xpcCBhdCAxXG4gICAgY29uc3Qgc21vb3RoaW5nRmFjdG9yID0gTWF0aC5taW4oQ29uc3RhbnRzLm1pblNtb290aGluZ0ZhY3RvciwgdGhpcy5zbW9vdGhpbmcgKyAocmF3RGlzdCAtIDYwKSAvIDMwMDApO1xuXG4gICAgLy8gY2FsY3VsYXRlIHByb2Nlc3NlZCBjb29yZGluYXRlc1xuICAgIGNvbnN0IHByb2NYID0geCAtICh4IC0gcHJldlgpICogc21vb3RoaW5nRmFjdG9yO1xuICAgIGNvbnN0IHByb2NZID0geSAtICh5IC0gcHJldlkpICogc21vb3RoaW5nRmFjdG9yO1xuXG4gICAgLy8gcmVjYWxjdWxhdGUgZGlzdGFuY2UgZnJvbSBwcmV2aW91cyBwb2ludCwgdGhpcyB0aW1lIHJlbGF0aXZlIHRvIHRoZSBzbW9vdGhlZCBjb29yZHNcbiAgICBjb25zdCBkaXN0ID0gUGl4ZWxzLmxpbmVEaXN0YW5jZShwcm9jWCwgcHJvY1ksIHByZXZYLCBwcmV2WSk7XG5cbiAgICBpZiAodGhpcy5hZGFwdGl2ZVN0cm9rZSkge1xuICAgICAgLy8gY2FsY3VsYXRlIHRhcmdldCB0aGlja25lc3MgYmFzZWQgb24gdGhlIG5ldyBkaXN0YW5jZVxuICAgICAgdGhpcy5fdGFyZ2V0VGhpY2tuZXNzID0gKGRpc3QgLSBDb25zdGFudHMubWluTGluZVRoaWNrbmVzcylcbiAgICAgICAgLyBDb25zdGFudHMubGluZVRoaWNrbmVzc1JhbmdlICogKHRoaXMuX21heFdlaWdodCAtIHRoaXMuX3dlaWdodCkgKyB0aGlzLl93ZWlnaHQ7XG4gICAgICAvLyBhcHByb2FjaCB0aGUgdGFyZ2V0IGdyYWR1YWxseVxuICAgICAgaWYgKHRoaXMuX3RoaWNrbmVzcyA+IHRoaXMuX3RhcmdldFRoaWNrbmVzcykge1xuICAgICAgICB0aGlzLl90aGlja25lc3MgLT0gQ29uc3RhbnRzLnRoaWNrbmVzc0luY3JlbWVudDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHRoaXMuX3RoaWNrbmVzcyA8IHRoaXMuX3RhcmdldFRoaWNrbmVzcykge1xuICAgICAgICB0aGlzLl90aGlja25lc3MgKz0gQ29uc3RhbnRzLnRoaWNrbmVzc0luY3JlbWVudDtcbiAgICAgIH1cbiAgICAgIC8vIHNldCBsaW5lIHdpZHRoXG4gICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IHRoaXMuX3RoaWNrbmVzcztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvLyBsaW5lIHdpZHRoIGlzIGVxdWFsIHRvIGRlZmF1bHQgd2VpZ2h0XG4gICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IHRoaXMuX3dlaWdodDtcbiAgICB9XG5cbiAgICAvLyBkcmF3IHVzaW5nIHF1YWQgaW50ZXJwb2xhdGlvblxuICAgIGNvbnRleHQucXVhZHJhdGljQ3VydmVUbyhwcmV2WCwgcHJldlksIHByb2NYLCBwcm9jWSk7XG4gICAgY29udGV4dC5zdHJva2UoKTtcblxuICAgIHJldHVybiB7IHg6IHByb2NYLCB5OiBwcm9jWSB9O1xuICB9XG5cbiAgZ2V0IGNvbG9yKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQuc3Ryb2tlU3R5bGUudG9TdHJpbmcoKTtcbiAgfVxuXG4gIHNldCBjb2xvcihjKSB7XG4gICAgaWYgKHR5cGVvZiBjICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBhcmd1bWVudCB0eXBlJyk7XG4gICAgdGhpcy5jb250ZXh0LnN0cm9rZVN0eWxlID0gYztcbiAgfVxuXG4gIGdldCB3ZWlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dlaWdodDtcbiAgfVxuXG4gIHNldCB3ZWlnaHQodykge1xuICAgIGlmICh0eXBlb2YgdyAhPT0gJ251bWJlcicpIHRocm93IG5ldyBFcnJvcignd3JvbmcgYXJndW1lbnQgdHlwZScpO1xuICAgIHRoaXMuX3dlaWdodCA9IHc7XG4gICAgdGhpcy5fdGhpY2tuZXNzID0gdztcbiAgICB0aGlzLl90YXJnZXRUaGlja25lc3MgPSB3O1xuICAgIHRoaXMuX21heFdlaWdodCA9IHcgKyBDb25zdGFudHMud2VpZ2h0U3ByZWFkO1xuICB9XG5cbiAgZ2V0IG1vZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21vZGU7XG4gIH1cblxuICBzZXQgbW9kZShtKSB7XG4gICAgaWYgKHR5cGVvZiBtICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBhcmd1bWVudCB0eXBlJyk7XG4gICAgc3dpdGNoIChtKSB7XG4gICAgICBjYXNlIERyYXdpbmdNb2RlLkVSQVNFOlxuICAgICAgICB0aGlzLl9tb2RlID0gRHJhd2luZ01vZGUuRVJBU0U7XG4gICAgICAgIHRoaXMuY29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnZGVzdGluYXRpb24tb3V0JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERyYXdpbmdNb2RlLkZJTEw6XG4gICAgICAgIHRoaXMuX21vZGUgPSBEcmF3aW5nTW9kZS5GSUxMO1xuICAgICAgICB0aGlzLmNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gJ3NvdXJjZS1vdmVyJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERyYXdpbmdNb2RlLkRJU0FCTEVEOlxuICAgICAgICB0aGlzLl9tb2RlID0gRHJhd2luZ01vZGUuRElTQUJMRUQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhpcy5fbW9kZSA9IERyYXdpbmdNb2RlLkRSQVc7XG4gICAgICAgIHRoaXMuY29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnc291cmNlLW92ZXInO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpc0RpcnR5KCkge1xuICAgIHJldHVybiAhIXRoaXMuX2RpcnR5O1xuICB9XG5cbiAgZmlyZURpcnR5KCkge1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudCgnZGlydHknKTtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIGlmICghdGhpcy5pc0RpcnR5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fZGlydHkgPSBmYWxzZTtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoJ2NsZWFuJyk7XG5cbiAgICAvLyBtYWtlIHN1cmUgd2UncmUgaW4gdGhlIHJpZ2h0IGNvbXBvc2l0aW5nIG1vZGUsIGFuZCBlcmFzZSBldmVyeXRoaW5nXG4gICAgaWYgKHRoaXMubW9kZSA9PT0gRHJhd2luZ01vZGUuRVJBU0UpIHtcbiAgICAgIHRoaXMubW9kZSA9IERyYXdpbmdNb2RlLkRSQVc7XG4gICAgICB0aGlzLmNvbnRleHQuY2xlYXJSZWN0KC0xMCwgLTEwLCB0aGlzLmNhbnZhcy53aWR0aCArIDIwLCB0aGlzLmNhbnZhcy5oZWlnaHQgKyAyMCk7XG4gICAgICB0aGlzLm1vZGUgPSBEcmF3aW5nTW9kZS5FUkFTRTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmNvbnRleHQuY2xlYXJSZWN0KC0xMCwgLTEwLCB0aGlzLmNhbnZhcy53aWR0aCArIDIwLCB0aGlzLmNhbnZhcy5oZWlnaHQgKyAyMCk7XG4gICAgfVxuICB9XG5cbiAgdG9JbWFnZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jYW52YXMudG9EYXRhVVJMKCk7XG4gIH1cblxuICBmaWxsKCkge1xuICAgIGNvbnN0IHsgbW91c2UgfSA9IHRoaXM7XG4gICAgY29uc3QgeyBjb250ZXh0IH0gPSB0aGlzO1xuICAgIC8vIGNvbnZlcnRpbmcgdG8gQXJyYXkgYmVjYXVzZSBTYWZhcmkgOVxuICAgIGNvbnN0IHN0YXJ0Q29sb3IgPSBBcnJheS5mcm9tKGNvbnRleHQuZ2V0SW1hZ2VEYXRhKG1vdXNlLngsIG1vdXNlLnksIDEsIDEpLmRhdGEpIGFzIENvbG9yUGl4ZWxSR0JBO1xuICAgIGlmIChzdGFydENvbG9yLmxlbmd0aCAhPT0gNCkgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3QgcGl4ZWwgZm9ybWF0IG9mIFJHQkEnKTtcblxuICAgIGlmICghdGhpcy5fZmlsbGluZykge1xuICAgICAgY29uc3QgeyB4LCB5IH0gPSBtb3VzZTtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCgnZmlsbHN0YXJ0JywgeyB4LCB5IH0pO1xuICAgICAgdGhpcy5fZmlsbGluZyA9IHRydWU7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHsgdGhpcy5fZmxvb2RGaWxsKG1vdXNlLngsIG1vdXNlLnksIHN0YXJ0Q29sb3IpOyB9LCBDb25zdGFudHMuZmxvb2RGaWxsSW50ZXJ2YWwpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuX2ZpbGxTdGFjay5wdXNoKFtcbiAgICAgICAgbW91c2UueCxcbiAgICAgICAgbW91c2UueSxcbiAgICAgICAgc3RhcnRDb2xvclxuICAgICAgXSk7XG4gICAgfVxuICB9XG5cbiAgX2Zsb29kRmlsbChfc3RhcnRYOiBudW1iZXIsIF9zdGFydFk6IG51bWJlciwgc3RhcnRDb2xvcjogQ29sb3JQaXhlbFJHQkEpIHtcbiAgICBjb25zdCB7IGNvbnRleHQgfSA9IHRoaXM7XG4gICAgY29uc3Qgc3RhcnRYID0gTWF0aC5mbG9vcihfc3RhcnRYKTtcbiAgICBjb25zdCBzdGFydFkgPSBNYXRoLmZsb29yKF9zdGFydFkpO1xuICAgIGNvbnN0IGNhbnZhc1dpZHRoID0gY29udGV4dC5jYW52YXMud2lkdGg7XG4gICAgY29uc3QgY2FudmFzSGVpZ2h0ID0gY29udGV4dC5jYW52YXMuaGVpZ2h0O1xuICAgIGNvbnN0IHBpeGVsU3RhY2sgPSBbW3N0YXJ0WCwgc3RhcnRZXV07XG5cbiAgICAvLyBoZXggbmVlZHMgdG8gYmUgdHJhc2Zvcm1lZCB0byByZ2Igc2luY2UgY29sb3JMYXllciBhY2NlcHRzIFJHQlxuICAgIGNvbnN0IGZpbGxDb2xvciA9IFBpeGVscy5oZXhUb1JnYih0aGlzLmNvbG9yKTtcblxuICAgIC8vIE5lZWQgdG8gc2F2ZSBjdXJyZW50IGNvbnRleHQgd2l0aCBjb2xvcnMsIHdlIHdpbGwgdXBkYXRlIGl0XG4gICAgY29uc3QgY29sb3JMYXllciA9IGNvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIGNvbnRleHQuY2FudmFzLndpZHRoLCBjb250ZXh0LmNhbnZhcy5oZWlnaHQpO1xuXG4gICAgY29uc3QgY29sb3JMYXllckRhdGEgPSBBcnJheS5mcm9tKGNvbG9yTGF5ZXIuZGF0YSk7XG4gICAgY29uc3QgYWxwaGEgPSBNYXRoLm1pbihjb250ZXh0Lmdsb2JhbEFscGhhICogMTAgKiAyNTUsIDI1NSk7XG4gICAgY29uc3QgY29sb3JQaXhlbCA9IFBpeGVscy5jb2xvclBpeGVsKGNvbG9yTGF5ZXJEYXRhLCAuLi5maWxsQ29sb3IsIHN0YXJ0Q29sb3IsIGFscGhhKTtcbiAgICBjb25zdCBtYXRjaENvbG9yID0gUGl4ZWxzLm1hdGNoQ29sb3IoY29sb3JMYXllckRhdGEsIC4uLnN0YXJ0Q29sb3IpO1xuICAgIGNvbnN0IG1hdGNoRmlsbENvbG9yID0gUGl4ZWxzLm1hdGNoQ29sb3IoY29sb3JMYXllckRhdGEsIC4uLmZpbGxDb2xvciwgMjU1KTtcblxuICAgIC8vIGNoZWNrIGlmIHdlJ3JlIHRyeWluZyB0byBmaWxsIHdpdGggdGhlIHNhbWUgY29sb3VyLCBpZiBzbywgc3RvcFxuICAgIGlmIChtYXRjaEZpbGxDb2xvcigoc3RhcnRZICogY29udGV4dC5jYW52YXMud2lkdGggKyBzdGFydFgpICogNCkpIHtcbiAgICAgIHRoaXMuX2ZpbGxpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCgnZmlsbGVuZCcsIHt9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3aGlsZSAocGl4ZWxTdGFjay5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IG5ld1BvcyA9IHBpeGVsU3RhY2sucG9wKCk7XG4gICAgICBjb25zdCB4ID0gbmV3UG9zWzBdO1xuICAgICAgbGV0IHkgPSBuZXdQb3NbMV07XG5cbiAgICAgIGxldCBwaXhlbFBvcyA9ICh5ICogY2FudmFzV2lkdGggKyB4KSAqIDQ7XG5cbiAgICAgIHdoaWxlICh5LS0gPj0gMCAmJiBtYXRjaENvbG9yKHBpeGVsUG9zKSkge1xuICAgICAgICBwaXhlbFBvcyAtPSBjYW52YXNXaWR0aCAqIDQ7XG4gICAgICB9XG4gICAgICBwaXhlbFBvcyArPSBjYW52YXNXaWR0aCAqIDQ7XG5cbiAgICAgICsreTtcblxuICAgICAgbGV0IHJlYWNoTGVmdCA9IGZhbHNlO1xuICAgICAgbGV0IHJlYWNoUmlnaHQgPSBmYWxzZTtcblxuICAgICAgd2hpbGUgKHkrKyA8IGNhbnZhc0hlaWdodCAtIDEgJiYgbWF0Y2hDb2xvcihwaXhlbFBvcykpIHtcbiAgICAgICAgY29sb3JQaXhlbChwaXhlbFBvcyk7XG5cbiAgICAgICAgaWYgKHggPiAwKSB7XG4gICAgICAgICAgaWYgKG1hdGNoQ29sb3IocGl4ZWxQb3MgLSA0KSkge1xuICAgICAgICAgICAgaWYgKCFyZWFjaExlZnQpIHtcbiAgICAgICAgICAgICAgcGl4ZWxTdGFjay5wdXNoKFt4IC0gMSwgeV0pO1xuICAgICAgICAgICAgICByZWFjaExlZnQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChyZWFjaExlZnQpIHtcbiAgICAgICAgICAgIHJlYWNoTGVmdCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh4IDwgY2FudmFzV2lkdGggLSAxKSB7XG4gICAgICAgICAgaWYgKG1hdGNoQ29sb3IocGl4ZWxQb3MgKyA0KSkge1xuICAgICAgICAgICAgaWYgKCFyZWFjaFJpZ2h0KSB7XG4gICAgICAgICAgICAgIHBpeGVsU3RhY2sucHVzaChbeCArIDEsIHldKTtcbiAgICAgICAgICAgICAgcmVhY2hSaWdodCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKHJlYWNoUmlnaHQpIHtcbiAgICAgICAgICAgIHJlYWNoUmlnaHQgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwaXhlbFBvcyArPSBjYW52YXNXaWR0aCAqIDQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIGNvbnRleHQgd2l0aCBmaWxsZWQgYnVja2V0IVxuICAgIGNvbnRleHQucHV0SW1hZ2VEYXRhKGNvbG9yTGF5ZXIsIDAsIDApO1xuXG4gICAgaWYgKHRoaXMuX2ZpbGxTdGFjay5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX2Zsb29kRmlsbCguLi50aGlzLl9maWxsU3RhY2suc2hpZnQoKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5fZmlsbGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KCdmaWxsZW5kJywge30pO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgeyBBdHJhbWVudCB9O1xuIiwiZXhwb3J0IHsgQXRyYW1lbnQgfSBmcm9tICcuL3NyYy9hdHJhbWVudCc7XG4iXSwic291cmNlUm9vdCI6IiJ9