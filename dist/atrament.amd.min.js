define("atramentJs",[],(function(){return function(t){var e={};function s(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,s),n.l=!0,n.exports}return s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)s.d(i,n,function(e){return t[e]}.bind(null,n));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=4)}([function(t,e){const s={floodFillInterval:100,maxLineThickness:50,minLineThickness:1};s.lineThicknessRange=s.maxLineThickness-s.minLineThickness,s.thicknessIncrement=.5,s.minSmoothingFactor=.87,s.initialSmoothingFactor=.85,s.weightSpread=10,s.initialThickness=2,t.exports=s},function(t,e){e.lineDistance=(t,e,s,i)=>{const n=Math.pow(s-t,2),o=Math.pow(i-e,2);return Math.sqrt(n+o)},e.hexToRgb=t=>{const e=t.match(/^#?([\da-f]{2})([\da-f]{2})([\da-f]{2})$/i);return[parseInt(e[1],16),parseInt(e[2],16),parseInt(e[3],16)]},e.matchColor=(t,e,s,i,n)=>o=>{const r=t[o],h=t[o+1],a=t[o+2],c=t[o+3];return r===e&&h===s&&a===i&&c===n},e.colorPixel=(t,s,i,n,o,r)=>{const h=e.matchColor(t,...o);return e=>{t[e]=s,t[e+1]=i,t[e+2]=n,t[e+3]=r,h(e+4)||(t[e+4]=.01*t[e+4]+.99*s,t[e+4+1]=.01*t[e+4+1]+.99*i,t[e+4+2]=.01*t[e+4+2]+.99*n,t[e+4+3]=.01*t[e+4+3]+.99*r),h(e-4)||(t[e-4]=.01*t[e-4]+.99*s,t[e-4+1]=.01*t[e-4+1]+.99*i,t[e-4+2]=.01*t[e-4+2]+.99*n,t[e-4+3]=.01*t[e-4+3]+.99*r)}}},function(t,e){class s{constructor(t,e){this.x=t,this.y=e}set(t,e){this.x=t,this.y=e}}t.exports={Mouse:class extends s{constructor(){super(0,0),this.down=!1,this.previous=new s(0,0)}},Point:s}},function(t,e){t.exports={AtramentEventTarget:class{constructor(){this.eventListeners=new Map}addEventListener(t,e){const s=this.eventListeners.get(t)||new Set;s.add(e),this.eventListeners.set(t,s)}removeEventListener(t,e){const s=this.eventListeners.get(t);s&&s.delete(e)}dispatchEvent(t,e){const s=this.eventListeners.get(t);s&&[...s].forEach(t=>t(e))}}}},function(t,e,s){t.exports=s(5)},function(t,e,s){"use strict";s.r(e);var i=s(2),n=s(0),o=s.n(n),r=s(1),h=s.n(r),a=s(3);const c={DRAW:"draw",ERASE:"erase",FILL:"fill",DISABLED:"disabled"},d=[c.DRAW,c.ERASE];class l extends a.AtramentEventTarget{constructor(t,e={}){if("undefined"==typeof window)throw new Error("Looks like we're not running in a browser");if(super(),t instanceof window.Node&&"CANVAS"===t.tagName)this.canvas=t;else{if("string"!=typeof t)throw new Error(`can't look for canvas based on '${t}'`);this.canvas=document.querySelector(t)}if(!this.canvas)throw new Error("canvas not found");this.canvas.width=e.width||this.canvas.width,this.canvas.height=e.height||this.canvas.height,this.mouse=new i.Mouse;const s=t=>{t.cancelable&&t.preventDefault();const e=this.canvas.getBoundingClientRect(),s=t.changedTouches&&t.changedTouches[0]||t;let i=s.offsetX,n=s.offsetY;void 0===i&&(i=s.clientX-e.left),void 0===n&&(n=s.clientY-e.top);const{mouse:o}=this;if(o.down&&d.includes(this.mode)){const{x:t,y:e}=this.draw(i,n,o.previous.x,o.previous.y);this._dirty||this.mode!==c.DRAW||i===o.x&&n===o.y||(this._dirty=!0,this.fireDirty()),o.set(i,n),o.previous.set(t,e)}else o.set(i,n)},n=t=>{if(t.cancelable&&t.preventDefault(),s(t),this.mode===c.FILL)return void this.fill();const{mouse:e}=this;e.previous.set(e.x,e.y),e.down=!0,this.beginStroke(e.previous.x,e.previous.y)},r=t=>{if(this.mode===c.FILL)return;const{mouse:e}=this;if(!e.down)return;const s=t.changedTouches&&t.changedTouches[0]||t,i=s.offsetX,n=s.offsetY;if(e.down=!1,e.x===i&&e.y===n&&d.includes(this.mode)){const{x:t,y:s}=this.draw(e.x,e.y,e.previous.x,e.previous.y);e.previous.set(t,s)}this.endStroke(e.x,e.y)};this.canvas.addEventListener("mousemove",s),this.canvas.addEventListener("mousedown",n),document.addEventListener("mouseup",r),this.canvas.addEventListener("touchstart",n),this.canvas.addEventListener("touchend",r),this.canvas.addEventListener("touchmove",s),this.destroy=()=>{this.clear(),this.canvas.removeEventListener("mousemove",s),this.canvas.removeEventListener("mousedown",n),document.removeEventListener("mouseup",r),this.canvas.removeEventListener("touchstart",n),this.canvas.removeEventListener("touchend",r),this.canvas.removeEventListener("touchmove",s)},this.context=this.canvas.getContext("2d"),this.context.globalCompositeOperation="source-over",this.context.globalAlpha=1,this.context.strokeStyle=e.color||"rgba(0,0,0,1)",this.context.lineCap="round",this.context.lineJoin="round",this.context.translate(.5,.5),this._filling=!1,this._fillStack=[],this.recordStrokes=!1,this.strokeMemory=[],this.smoothing=o.a.initialSmoothingFactor,this._thickness=o.a.initialThickness,this._targetThickness=this._thickness,this._weight=this._thickness,this._maxWeight=this._thickness+o.a.weightSpread,this._mode=c.DRAW,this.adaptiveStroke=!0,["weight","smoothing","adaptiveStroke","mode"].forEach(t=>void 0===e[t]?0:this[t]=e[t])}beginStroke(t,e){this.context.beginPath(),this.context.moveTo(t,e),this.recordStrokes&&(this.strokeTimestamp=performance.now(),this.strokeMemory.push({point:new i.Point(t,e),time:performance.now()-this.strokeTimestamp})),this.dispatchEvent("strokestart",{x:t,y:e})}endStroke(t,e){if(this.context.closePath(),this.recordStrokes&&this.strokeMemory.push({point:new i.Point(t,e),time:performance.now()-this.strokeTimestamp}),this.dispatchEvent("strokeend",{x:t,y:e}),this.recordStrokes){const t={points:this.strokeMemory.slice(),mode:this.mode,weight:this.weight,smoothing:this.smoothing,color:this.color,adaptiveStroke:this.adaptiveStroke};this.dispatchEvent("strokerecorded",{stroke:t})}this.strokeMemory=[],delete this.strokeTimestamp}draw(t,e,s,n){this.recordStrokes&&this.strokeMemory.push({point:new i.Point(t,e),time:performance.now()-this.strokeTimestamp});const{context:r}=this,a=h.a.lineDistance(t,e,s,n),c=Math.min(o.a.minSmoothingFactor,this.smoothing+(a-60)/3e3),d=t-(t-s)*c,l=e-(e-n)*c,u=h.a.lineDistance(d,l,s,n);return this.adaptiveStroke?(this._targetThickness=(u-o.a.minLineThickness)/o.a.lineThicknessRange*(this._maxWeight-this._weight)+this._weight,this._thickness>this._targetThickness?this._thickness-=o.a.thicknessIncrement:this._thickness<this._targetThickness&&(this._thickness+=o.a.thicknessIncrement),r.lineWidth=this._thickness):r.lineWidth=this._weight,r.quadraticCurveTo(s,n,d,l),r.stroke(),{x:d,y:l}}get color(){return this.context.strokeStyle}set color(t){if("string"!=typeof t)throw new Error("wrong argument type");this.context.strokeStyle=t}get weight(){return this._weight}set weight(t){if("number"!=typeof t)throw new Error("wrong argument type");this._weight=t,this._thickness=t,this._targetThickness=t,this._maxWeight=t+o.a.weightSpread}get mode(){return this._mode}set mode(t){if("string"!=typeof t)throw new Error("wrong argument type");switch(t){case c.ERASE:this._mode=c.ERASE,this.context.globalCompositeOperation="destination-out";break;case c.FILL:this._mode=c.FILL,this.context.globalCompositeOperation="source-over";break;case c.DISABLED:this._mode=c.DISABLED;break;default:this._mode=c.DRAW,this.context.globalCompositeOperation="source-over"}}isDirty(){return!!this._dirty}fireDirty(){this.dispatchEvent("dirty")}clear(){this.isDirty&&(this._dirty=!1,this.dispatchEvent("clean"),this.mode===c.ERASE?(this.mode=c.DRAW,this.context.clearRect(-10,-10,this.canvas.width+20,this.canvas.height+20),this.mode=c.ERASE):this.context.clearRect(-10,-10,this.canvas.width+20,this.canvas.height+20))}toImage(){return this.canvas.toDataURL()}fill(){const{mouse:t}=this,{context:e}=this,s=Array.from(e.getImageData(t.x,t.y,1,1).data);if(this._filling)this._fillStack.push([t.x,t.y,s]);else{const{x:e,y:i}=t;this.dispatchEvent("fillstart",{x:e,y:i}),this._filling=!0,setTimeout(()=>{this._floodFill(t.x,t.y,s)},o.a.floodFillInterval)}}_floodFill(t,e,s){const{context:i}=this,n=Math.floor(t),o=Math.floor(e),r=i.canvas.width,a=i.canvas.height,c=[[n,o]],d=h.a.hexToRgb(this.color),l=i.getImageData(0,0,i.canvas.width,i.canvas.height),u=Math.min(10*i.globalAlpha*255,255),m=h.a.colorPixel(l.data,...d,s,u),v=h.a.matchColor(l.data,...s);if(h.a.matchColor(l.data,...d,255)(4*(o*i.canvas.width+n)))return this._filling=!1,void this.dispatchEvent("fillend",{});for(;c.length;){const t=c.pop(),e=t[0];let s=t[1],i=4*(s*r+e);for(;s-- >=0&&v(i);)i-=4*r;i+=4*r,++s;let n=!1,o=!1;for(;s++<a-1&&v(i);)m(i),e>0&&(v(i-4)?n||(c.push([e-1,s]),n=!0):n&&(n=!1)),e<r-1&&(v(i+4)?o||(c.push([e+1,s]),o=!0):o&&(o=!1)),i+=4*r}i.putImageData(l,0,0),this._fillStack.length?this._floodFill(...this._fillStack.shift()):(this._filling=!1,this.dispatchEvent("fillend",{}))}}s.d(e,"Atrament",(function(){return l}))}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,