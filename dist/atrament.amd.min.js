define("atrament",[],(function(){return function(t){var e={};function s(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,s),o.l=!0,o.exports}return s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)s.d(i,o,function(e){return t[e]}.bind(null,o));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){t.exports=s(1)},function(t,e,s){"use strict";s.r(e);class i{constructor(t,e){this.x=t,this.y=e}set(t,e){this.x=t,this.y=e}}class o extends i{constructor(){super(0,0),this.down=!1,this.previous=new i(0,0)}}const n=100,r=1,h=50-r,a=.5,c=.87,d=.85,u=10,l=2;function f(t,e,s,i){const o=Math.pow(s-t,2),n=Math.pow(i-e,2);return Math.sqrt(o+n)}function v(t,e,s,i,o){return n=>{const r=t[n],h=t[n+1],a=t[n+2],c=t[n+3];return r===e&&h===s&&a===i&&c===o}}class m{constructor(){this.eventListeners=new Map}addEventListener(t,e){const s=this.eventListeners.get(t)||new Set;s.add(e),this.eventListeners.set(t,s)}removeEventListener(t,e){const s=this.eventListeners.get(t);s&&s.delete(e)}dispatchEvent(t,e){const s=this.eventListeners.get(t);s&&s.forEach(t=>t(e))}}function p(t,e){for(let s=0;s<t.length;s++)if(t[s]===e)return!0;return!1}function g(t,e){const s="changedTouches"in t&&t.changedTouches[0]||t;return{x:"offsetX"in s?s.offsetX:s.clientX-e.left,y:"offsetY"in s?s.offsetY:s.clientY-e.top}}var w;!function(t){t.DRAW="draw",t.ERASE="erase",t.FILL="fill",t.DISABLED="disabled"}(w||(w={}));const y=[w.DRAW,w.ERASE];class k extends m{constructor(t,e={}){if("undefined"==typeof window)throw new Error("Looks like we're not running in a browser");if(super(),t instanceof window.Node&&"CANVAS"===t.tagName)this.canvas=t;else{if("string"!=typeof t)throw new Error(`can't look for canvas based on '${t}'`);this.canvas=document.querySelector(t)}if(!this.canvas)throw new Error("canvas not found");this.canvas.width=e.width||this.canvas.width,this.canvas.height=e.height||this.canvas.height,this.mouse=new o;const s=t=>{t.cancelable&&t.preventDefault();const e=this.canvas.getBoundingClientRect(),{x:s,y:i}=g(t,e),{mouse:o}=this;if(o.down&&p(y,this.mode)){const{x:t,y:e}=this.draw(s,i,o.previous.x,o.previous.y);this._dirty||this.mode!==w.DRAW||s===o.x&&i===o.y||(this._dirty=!0,this.fireDirty()),o.set(s,i),o.previous.set(t,e)}else o.set(s,i)},i=t=>{if(t.cancelable&&t.preventDefault(),s(t),this.mode===w.FILL)return void this.fill();const{mouse:e}=this;e.previous.set(e.x,e.y),e.down=!0,this.beginStroke(e.previous.x,e.previous.y)},n=t=>{if(this.mode===w.FILL)return;const{mouse:e}=this;if(!e.down)return;const s=this.canvas.getBoundingClientRect(),{x:i,y:o}=g(t,s);if(e.down=!1,e.x===i&&e.y===o&&p(y,this.mode)){const{x:t,y:s}=this.draw(e.x,e.y,e.previous.x,e.previous.y);e.previous.set(t,s)}this.endStroke(e.x,e.y)};this.canvas.addEventListener("mousemove",s),this.canvas.addEventListener("mousedown",i),document.addEventListener("mouseup",n),this.canvas.addEventListener("touchstart",i),this.canvas.addEventListener("touchend",n),this.canvas.addEventListener("touchmove",s),this.destroy=()=>{this.clear(),this.canvas.removeEventListener("mousemove",s),this.canvas.removeEventListener("mousedown",i),document.removeEventListener("mouseup",n),this.canvas.removeEventListener("touchstart",i),this.canvas.removeEventListener("touchend",n),this.canvas.removeEventListener("touchmove",s)},this.context=this.canvas.getContext("2d"),this.context.globalCompositeOperation="source-over",this.context.globalAlpha=1,this.context.strokeStyle=e.color||"rgba(0,0,0,1)",this.context.lineCap="round",this.context.lineJoin="round",this.context.translate(.5,.5),this._filling=!1,this._fillStack=[],this.recordStrokes=!1,this.strokeMemory=[],this.smoothing=d,this._thickness=l,this._targetThickness=this._thickness,this._weight=this._thickness,this._maxWeight=this._thickness+u,this._mode=w.DRAW,this.adaptiveStroke=!0,void 0!==e.weight&&(this.weight=e.weight),void 0!==e.smoothing&&(this.smoothing=e.smoothing),void 0!==e.adaptiveStroke&&(this.adaptiveStroke=e.adaptiveStroke),void 0!==e.mode&&(this.mode=e.mode)}beginStroke(t,e){this.context.beginPath(),this.context.moveTo(t,e),this.recordStrokes&&(this.strokeTimestamp=performance.now(),this.strokeMemory.push({point:new i(t,e),time:performance.now()-this.strokeTimestamp})),this.dispatchEvent("strokestart",{x:t,y:e})}endStroke(t,e){if(this.context.closePath(),this.recordStrokes&&this.strokeMemory.push({point:new i(t,e),time:performance.now()-this.strokeTimestamp}),this.dispatchEvent("strokeend",{x:t,y:e}),this.recordStrokes){const t={points:this.strokeMemory.slice(),mode:this.mode,weight:this.weight,smoothing:this.smoothing,color:this.color,adaptiveStroke:this.adaptiveStroke};this.dispatchEvent("strokerecorded",{stroke:t})}this.strokeMemory=[],delete this.strokeTimestamp}draw(t,e,s,o){this.recordStrokes&&this.strokeMemory.push({point:new i(t,e),time:performance.now()-this.strokeTimestamp});const{context:n}=this,d=f(t,e,s,o),u=Math.min(c,this.smoothing+(d-60)/3e3),l=t-(t-s)*u,v=e-(e-o)*u,m=f(l,v,s,o);return this.adaptiveStroke?(this._targetThickness=(m-r)/h*(this._maxWeight-this._weight)+this._weight,this._thickness>this._targetThickness?this._thickness-=a:this._thickness<this._targetThickness&&(this._thickness+=a),n.lineWidth=this._thickness):n.lineWidth=this._weight,n.quadraticCurveTo(s,o,l,v),n.stroke(),{x:l,y:v}}get color(){return this.context.strokeStyle.toString()}set color(t){if("string"!=typeof t)throw new Error("wrong argument type");this.context.strokeStyle=t}get weight(){return this._weight}set weight(t){if("number"!=typeof t)throw new Error("wrong argument type");this._weight=t,this._thickness=t,this._targetThickness=t,this._maxWeight=t+u}get mode(){return this._mode}set mode(t){if("string"!=typeof t)throw new Error("wrong argument type");switch(t){case w.ERASE:this._mode=w.ERASE,this.context.globalCompositeOperation="destination-out";break;case w.FILL:this._mode=w.FILL,this.context.globalCompositeOperation="source-over";break;case w.DISABLED:this._mode=w.DISABLED;break;default:this._mode=w.DRAW,this.context.globalCompositeOperation="source-over"}}isDirty(){return!!this._dirty}fireDirty(){this.dispatchEvent("dirty")}clear(){this.isDirty&&(this._dirty=!1,this.dispatchEvent("clean"),this.mode===w.ERASE?(this.mode=w.DRAW,this.context.clearRect(-10,-10,this.canvas.width+20,this.canvas.height+20),this.mode=w.ERASE):this.context.clearRect(-10,-10,this.canvas.width+20,this.canvas.height+20))}toImage(){return this.canvas.toDataURL()}fill(){const{mouse:t}=this,{context:e}=this,s=Array.from(e.getImageData(t.x,t.y,1,1).data);if(4!==s.length)throw new Error("Expect pixel format of RGBA");if(this._filling)this._fillStack.push([t.x,t.y,s]);else{const{x:e,y:i}=t;this.dispatchEvent("fillstart",{x:e,y:i}),this._filling=!0,setTimeout(()=>{this._floodFill(t.x,t.y,s)},n)}}_floodFill(t,e,s){const{context:i}=this,o=Math.floor(t),n=Math.floor(e),r=i.canvas.width,h=i.canvas.height,a=[[o,n]],c=function(t){const e=t.match(/^#?([\da-f]{2})([\da-f]{2})([\da-f]{2})$/i);return[parseInt(e[1],16),parseInt(e[2],16),parseInt(e[3],16)]}(this.color),d=i.getImageData(0,0,i.canvas.width,i.canvas.height),u=Array.from(d.data),l=Math.min(10*i.globalAlpha*255,255),f=function(t,e,s,i,o,n){const r=v(t,...o);return o=>{t[o]=e,t[o+1]=s,t[o+2]=i,t[o+3]=n,r(o+4)||(t[o+4]=.01*t[o+4]+.99*e,t[o+4+1]=.01*t[o+4+1]+.99*s,t[o+4+2]=.01*t[o+4+2]+.99*i,t[o+4+3]=.01*t[o+4+3]+.99*n),r(o-4)||(t[o-4]=.01*t[o-4]+.99*e,t[o-4+1]=.01*t[o-4+1]+.99*s,t[o-4+2]=.01*t[o-4+2]+.99*i,t[o-4+3]=.01*t[o-4+3]+.99*n)}}(u,...c,s,l),m=v(u,...s);if(v(u,...c,255)(4*(n*i.canvas.width+o)))return this._filling=!1,void this.dispatchEvent("fillend",{});for(;a.length;){const t=a.pop(),e=t[0];let s=t[1],i=4*(s*r+e);for(;s-- >=0&&m(i);)i-=4*r;i+=4*r,++s;let o=!1,n=!1;for(;s++<h-1&&m(i);)f(i),e>0&&(m(i-4)?o||(a.push([e-1,s]),o=!0):o&&(o=!1)),e<r-1&&(m(i+4)?n||(a.push([e+1,s]),n=!0):n&&(n=!1)),i+=4*r}i.putImageData(d,0,0),this._fillStack.length?this._floodFill(...this._fillStack.shift()):(this._filling=!1,this.dispatchEvent("fillend",{}))}}s.d(e,"Atrament",(function(){return k}))}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,